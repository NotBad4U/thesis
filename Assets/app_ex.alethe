(assume a0 (not (! (= f1 f2) :named @p_1)))
(assume a1 (forall ((?v0 S4) (?v1 S3)) 
    (= 
        (f63 (f80 f81 ?v0) ?v1) 
        (ite 
            (exists ((?v0 S4)) 
                (and 
                    (= (f5 ?v1 ?v0) f1) 
                    (forall ((?v3 S4)) (=> (= (f5 ?v1 ?v3) f1) (= ?v3 ?v0))))) 
            (f63 f72 ?v1)
            ?v0
        )
    )
))
(assume a2 (forall ((x S1) (y S1)) (= x y)))
(step t0 (cl 
    (not (! 
      (= (! 
        (=> (forall ((x S1) (y S1)) (= x y)) (! (= f2 f1) :named @p_4)) :named @p_5) 
        (! (=> (forall ((x S1) (y S1)) (= x y)) @p_1) :named @p_3)) :named @p_6
    )) 
    (not @p_5) @p_3) :rule equiv_pos2
)
(step t1 (cl 
  (= 
    (forall ((x S1) (y S1)) (= x y)) 
    (forall ((x S1) (y S1)) (= x y)))) 
  :rule refl)
(step t2 (cl (= @p_4 @p_1)) :rule rare_rewrite :args ("eq-symm" f2 f1))
(step t3 (cl @p_6) :rule cong :premises (t1 t2))
(step t4 (cl @p_5 (forall ((x S1) (y S1)) (= x y))) :rule implies_neg1)
(anchor :step t5)
(assume t5.a0 (forall ((x S1) (y S1)) (= x y)))
(step t5.t0 (cl (or (! (not (forall ((x S1) (y S1)) (= x y))) :named @p_2) @p_4))
  :rule forall_inst :args (f2 f1))
(step t5.t1 (cl @p_2 @p_4) :rule or :premises (t5.t0))
(step t5.t2 (cl @p_4) :rule resolution
  :premises (t5.t1 t5.a0) :args ((forall ((x S1) (y S1)) (= x y)) false))
(step t5 (cl @p_2 @p_4) :rule subproof :discharge (t5.a0))
(step t6 (cl @p_5 @p_4) :rule resolution
  :premises (t4 t5) :args ((forall ((x S1) (y S1)) (= x y)) true))
(step t7 (cl @p_5 (not @p_4)) :rule implies_neg2)
(step t8 (cl @p_5 @p_5) :rule resolution :premises (t6 t7) :args (@p_4 true))
(step t9 (cl @p_5) :rule contraction :premises (t8))
(step t10 (cl @p_3) :rule resolution
  :premises (t0 t3 t9) :args (@p_6 false @p_5 false))
(step t11 (cl @p_2 @p_1) :rule implies :premises (t10))
(step t12 (cl @p_1 @p_2) :rule reordering :premises (t11))
(step t13 (cl) :rule resolution
  :premises (t12 a2 a0) :args ((forall ((x S1) (y S1)) (= x y)) false @p_1 true))